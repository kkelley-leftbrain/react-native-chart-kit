var __extends =
  (this && this.__extends) ||
  (function() {
    var extendStatics = function(d, b) {
      extendStatics =
        Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array &&
          function(d, b) {
            d.__proto__ = b;
          }) ||
        function(d, b) {
          for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        };
      return extendStatics(d, b);
    };
    return function(d, b) {
      extendStatics(d, b);
      function __() {
        this.constructor = d;
      }
      d.prototype =
        b === null
          ? Object.create(b)
          : ((__.prototype = b.prototype), new __());
    };
  })();
var __assign =
  (this && this.__assign) ||
  function() {
    __assign =
      Object.assign ||
      function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
      };
    return __assign.apply(this, arguments);
  };
import Segment from "./segment";
import { sum, enhance } from "paths-js/ops";
import React from "react";
import { View } from "react-native";
import { G, Path, Rect, Svg, Text } from "react-native-svg";
import AbstractChart from "./AbstractChart";
var PieChartRing = /** @class */ (function(_super) {
  __extends(PieChartRing, _super);
  function PieChartRing() {
    return (_super !== null && _super.apply(this, arguments)) || this;
  }
  PieChartRing.prototype.render = function() {
    var _this = this;
    var _a = this.props,
      _b = _a.style,
      style = _b === void 0 ? {} : _b,
      backgroundColor = _a.backgroundColor,
      _c = _a.absolute,
      absolute = _c === void 0 ? false : _c,
      _d = _a.hasLegend,
      hasLegend = _d === void 0 ? true : _d,
      _e = _a.avoidFalseZero,
      avoidFalseZero = _e === void 0 ? true : _e;
    var _f = style.borderRadius,
      borderRadius = _f === void 0 ? 0 : _f;
    var debug = this.props.debug || false;
    if (debug) {
      console.log(
        "Data passed to pie: ",
        JSON.stringify(this.props.data, null, "\t")
      );
    }
    var chart = genPaths(
      this.props.data,
      this.props.accessor, // something like 'total' or 'population', etc.
      this.props.center || [0, 0], //center
      this.props.radius || 0, //r
      this.props.height / 2.5, //R
      {}
    );
    var total = this.props.data.reduce(function(acc, item) {
      return acc + item[_this.props.accessor];
    }, 0);
    var paths = chart.paths.map(function(c, i) {
      var value;
      if (absolute) {
        value = c.item[_this.props.accessor];
      } else {
        if (total === 0) {
          value = 0 + "%";
        } else {
          var percentage = Math.round(
            (100 / total) * c.item[_this.props.accessor]
          );
          value =
            Math.round((100 / total) * c.item[_this.props.accessor]) + "%";
          if (avoidFalseZero && percentage === 0) {
            value = "<1%";
          } else {
            value = percentage + "%";
          }
        }
      }
      return (
        <G key={Math.random()}>
          <Path
            d={c.path.path.print()}
            fill={"none"}
            stroke={c.item.color}
            strokeWidth={20}
            strokeLinecap={"round"}
          />
          {hasLegend ? (
            <Rect
              width="16px"
              height="16px"
              fill={c.item.color}
              rx={8}
              ry={8}
              x={_this.props.width / 2.5 - 24}
              y={
                -(_this.props.height / 2.5) +
                ((_this.props.height * 0.8) / _this.props.data.length) * i +
                12
              }
            />
          ) : null}
          {hasLegend ? (
            <Text
              fill={c.item.legendFontColor}
              fontSize={c.item.legendFontSize}
              fontFamily={c.item.legendFontFamily}
              x={_this.props.width / 2.5}
              y={
                -(_this.props.height / 2.5) +
                ((_this.props.height * 0.8) / _this.props.data.length) * i +
                12 * 2
              }
            >
              {value + " " + c.item.name}
            </Text>
          ) : null}
        </G>
      );
    });
    return (
      <View
        style={__assign(
          { width: this.props.width, height: this.props.height, padding: 0 },
          style
        )}
      >
        <Svg width={this.props.width} height={this.props.height}>
          <G>
            {this.renderDefs(
              __assign(
                { width: this.props.height, height: this.props.height },
                this.props.chartConfig
              )
            )}
          </G>
          <Rect
            width="100%"
            height={this.props.height}
            rx={borderRadius}
            ry={borderRadius}
            fill={backgroundColor}
          />
          <G
            x={
              this.props.width / 2 / 2 +
              Number(this.props.paddingLeft ? this.props.paddingLeft : 0)
            }
            y={this.props.height / 2}
          >
            {paths}
          </G>
        </Svg>
      </View>
    );
  };
  return PieChartRing;
})(AbstractChart);
// Generates the "Pie Ring" in order to meet the design spec
// Equivalent of 'Pie' exported from paths.js, will refactor / move later on
export function genPaths(data, accessor, center, r, R, compute) {
  var values = data.map(function(item) {
    return item[accessor];
  });
  var s = sum(values);
  // console.log("original sum: ", s.toLocaleString());
  var onepercent = s / 100;
  var threepercent = onepercent * 3;
  // 5% seems like a safe bet for things getting too small to observe
  var THRESHOLD = onepercent * 5;
  var below = function(x, t) {
    return x < t && x > 0;
  };
  // These are awkard. Smaller display values but not enough to repeatedly
  // take from
  var between = function(x, t) {
    return x >= t && x < t * 3;
  };
  // Assuming the 5% from above, let's not pull from a category
  // unless it's got more than 15% so things don't get jacked up
  var above = function(x, t) {
    return x > t * 3;
  };
  if (
    values.some(function(item) {
      return below(item, THRESHOLD);
    })
  ) {
    var belowcount_1 = values.filter(function(x) {
      return below(x, THRESHOLD);
    }).length;
    var safecount_1 = values.filter(function(x) {
      return above(x, THRESHOLD);
    }).length;
    if (
      values.some(function(item) {
        return between(item, THRESHOLD);
      })
    ) {
      // these are a bunch of 5-15% bastards.
      var awkwardcount_1 = values.filter(function(x) {
        return between(x, THRESHOLD);
      }).length;
      values = values.map(function(item) {
        if (above(item, THRESHOLD)) {
          // Reduce for both below and between values
          item -=
            (threepercent * (belowcount_1 + awkwardcount_1)) / safecount_1;
        } else if (below(item, THRESHOLD) || between(item, THRESHOLD)) {
          // Add 3% to both below and between values
          item += threepercent;
        }
        return item;
      });
    } else {
      values = values.map(function(item) {
        if (above(item, THRESHOLD)) {
          // Split the 3% reduction (per outlier) among the available segments
          item -= (threepercent * belowcount_1) / safecount_1;
        } else if (below(item, THRESHOLD)) {
          // Add 3% to the outliers
          item += threepercent;
        }
        return item;
      });
    }
  }
  s = s === 0 ? 1 : s;
  var scale = linear([0, s], [0, 2 * Math.PI]);
  var paths = [];
  var t = 0;
  var offset = 0.1;
  data.forEach(function(item, i) {
    var value = values[i];
    paths.push(
      enhance(compute, {
        item: item,
        index: i,
        path: Segment({
          center: center,
          r: 0,
          R: 100,
          start: scale(t) + offset,
          end: scale(t + value) - offset
        })
      })
    );
    // Starting point of next segment
    t += value;
  });
  return { paths: paths };
}
// All ripped from paths.js.
// Will clean up / properly import later
export function linear(_a, _b) {
  var a = _a[0],
    b = _a[1];
  var c = _b[0],
    d = _b[1];
  var f = function(x) {
    return c + ((d - c) * (x - a)) / (b - a);
  };
  return f;
}
export function plus(_a, _b) {
  var a = _a[0],
    b = _a[1];
  var c = _b[0],
    d = _b[1];
  return [a + c, b + d];
}
export function times(k, _a) {
  var a = _a[0],
    b = _a[1];
  return [k * a, k * b];
}
export function onCircle(r, angle) {
  times(r, [Math.sin(angle), -Math.cos(angle)]);
}
export default PieChartRing;
//# sourceMappingURL=data:application/json;base64,
