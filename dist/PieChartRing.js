var __extends =
  (this && this.__extends) ||
  (function() {
    var extendStatics = function(d, b) {
      extendStatics =
        Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array &&
          function(d, b) {
            d.__proto__ = b;
          }) ||
        function(d, b) {
          for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        };
      return extendStatics(d, b);
    };
    return function(d, b) {
      extendStatics(d, b);
      function __() {
        this.constructor = d;
      }
      d.prototype =
        b === null
          ? Object.create(b)
          : ((__.prototype = b.prototype), new __());
    };
  })();
var __assign =
  (this && this.__assign) ||
  function() {
    __assign =
      Object.assign ||
      function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
      };
    return __assign.apply(this, arguments);
  };
import Segment from "./segment";
import { sum, enhance } from "paths-js/ops";
import React from "react";
import { View } from "react-native";
import { G, Path, Rect, Svg, Text } from "react-native-svg";
import AbstractChart from "./AbstractChart";
var PieChartRing = /** @class */ (function(_super) {
  __extends(PieChartRing, _super);
  function PieChartRing() {
    return (_super !== null && _super.apply(this, arguments)) || this;
  }
  PieChartRing.prototype.render = function() {
    var _this = this;
    var _a = this.props,
      _b = _a.style,
      style = _b === void 0 ? {} : _b,
      backgroundColor = _a.backgroundColor,
      _c = _a.absolute,
      absolute = _c === void 0 ? false : _c,
      _d = _a.hasLegend,
      hasLegend = _d === void 0 ? true : _d,
      _e = _a.avoidFalseZero,
      avoidFalseZero = _e === void 0 ? false : _e;
    var _f = style.borderRadius,
      borderRadius = _f === void 0 ? 0 : _f;
    var debug = this.props.debug || false;
    if (debug) {
      console.log(
        "Data passed to pie: ",
        JSON.stringify(this.props.data, null, "\t")
      );
    }
    var chart = genPaths(
      this.props.data,
      this.props.accessor,
      this.props.center || [0, 0], //center
      this.props.radius || 0, //r
      this.props.height / 2.5, //R
      {}
    );
    var total = this.props.data.reduce(function(sum, item) {
      return sum + item[_this.props.accessor];
    }, 0);
    console.log("new chart render");
    var paths = chart.paths.map(function(c, i) {
      var value;
      if (absolute) {
        value = c.item[_this.props.accessor];
      } else {
        if (total === 0) {
          value = 0 + "%";
        } else {
          var percentage = Math.round(
            (100 / total) * c.item[_this.props.accessor]
          );
          value =
            Math.round((100 / total) * c.item[_this.props.accessor]) + "%";
          if (avoidFalseZero && percentage === 0) {
            value = "<1%";
          } else {
            value = percentage + "%";
          }
        }
      }
      console.log("I'm c: ", c.path.path.print());
      return (
        <G key={Math.random()}>
          <Path
            d={c.path.path.print()}
            fill={"none"}
            stroke={c.item.color}
            strokeWidth={20}
            strokeLinecap={"round"}
          />
          {hasLegend ? (
            <Rect
              width="16px"
              height="16px"
              fill={c.item.color}
              rx={8}
              ry={8}
              x={_this.props.width / 2.5 - 24}
              y={
                -(_this.props.height / 2.5) +
                ((_this.props.height * 0.8) / _this.props.data.length) * i +
                12
              }
            />
          ) : null}
          {hasLegend ? (
            <Text
              fill={c.item.legendFontColor}
              fontSize={c.item.legendFontSize}
              fontFamily={c.item.legendFontFamily}
              x={_this.props.width / 2.5}
              y={
                -(_this.props.height / 2.5) +
                ((_this.props.height * 0.8) / _this.props.data.length) * i +
                12 * 2
              }
            >
              {value + " " + c.item.name}
            </Text>
          ) : null}
        </G>
      );
    });
    var pathsG = (
      <G
        x={
          this.props.width / 2 / 2 +
          Number(this.props.paddingLeft ? this.props.paddingLeft : 0)
        }
        y={this.props.height / 2}
      >
        {paths}
      </G>
    );
    // console.log("pathsG: ", pathsG);
    return (
      <View
        style={__assign(
          { width: this.props.width, height: this.props.height, padding: 0 },
          style
        )}
      >
        <Svg width={this.props.width} height={this.props.height}>
          <G>
            {this.renderDefs(
              __assign(
                { width: this.props.height, height: this.props.height },
                this.props.chartConfig
              )
            )}
          </G>
          <Rect
            width="100%"
            height={this.props.height}
            rx={borderRadius}
            ry={borderRadius}
            fill={backgroundColor}
          />
          <G
            x={
              this.props.width / 2 / 2 +
              Number(this.props.paddingLeft ? this.props.paddingLeft : 0)
            }
            y={this.props.height / 2}
          >
            {paths}
          </G>
        </Svg>
      </View>
    );
  };
  return PieChartRing;
})(AbstractChart);
export function genPaths(data, accessor, center, r, R, compute) {
  // const accessor = x => x["total"];
  // const data = [
  //   { category: "one", total: 25 },
  //   { category: "two", total: 25 },
  //   { category: "three", total: 25 },
  //   { category: "four", total: 25 }
  // ];
  // console.log("data ", data);
  // console.log("accessor ", accessor);
  var values = data.map(function(item) {
    return item[accessor];
  });
  console.log("values ", values);
  // const center = [200, 200];
  // const compute = {};
  var s = sum(values);
  var onepercent = s / 100;
  if (
    values.some(function(item) {
      return item < onepercent * 3;
    })
  ) {
    values = values.map(function(item) {
      if (item > onepercent * 3) {
        item = item - onepercent;
      } else {
        item = item + onepercent * 4;
      }
      return item;
    });
  }
  console.log("updated values", values);
  s = s === 0 ? 1 : s;
  console.log("sum of values ", s);
  var scale = linear([0, s], [0, 2 * Math.PI], 10);
  var paths = [];
  var t = 0;
  var offset = 0.1;
  data.forEach(function(item, i) {
    var value = values[i];
    paths.push(
      enhance(compute, {
        item: item,
        index: i,
        path: Segment({
          center: center,
          r: 0,
          R: 100,
          start: scale(t) + offset,
          end: scale(t + value) - offset,
          offset: offset
        })
      })
    );
    t += value;
  });
  return { paths: paths };
}
export function linear(_a, _b, offset) {
  var a = _a[0],
    b = _a[1];
  var c = _b[0],
    d = _b[1];
  if (offset === void 0) {
    offset = 0;
  }
  var f = function(x) {
    // console.log("linear x ", x);
    return c + ((d - c) * (x - a)) / (b - a);
  };
  // f.inverse = () => linear([c, d], [a, b])
  return f;
}
export function plus(_a, _b) {
  var a = _a[0],
    b = _a[1];
  var c = _b[0],
    d = _b[1];
  return [a + c, b + d];
}
export function times(k, _a) {
  var a = _a[0],
    b = _a[1];
  return [k * a, k * b];
}
export function onCircle(r, angle) {
  times(r, [Math.sin(angle), -Math.cos(angle)]);
}
export default PieChartRing;
//# sourceMappingURL=data:application/json;base64,
